// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  // Here one user can have N number of posts - but one post can only have one user/author/creator - so it is one to many relationship
  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follows[] @relation("following") // other users that starts following current logged in user
  following Follows[] @relation("follower") // the current logged in user following other users

  notifications        Notification[] @relation("UserNotification") //when current logged in user get notifications
  notificationsCreated Notification[] @relation("notificationCreator") // notifications created by the user
}

model Post {
  id       String  @id @default(cuid())
  authorId String
  content  String?
  image    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  //Cascade means if the user is deleted then all the posts related to that user will also be deleted
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  //relations

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  //Composite Index - faster queries
  @@index([authorId, postId])
}
